#include<stdio.h> 
#include <stdbool.h> 
#define SIZE 24
#define nRows 8
#define nCols 3

/* PROTOTYPES */
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);

bool isValid(const int arr[],int length, int pos);
void remove_element(int arr[],int length, int pos);
void insert_element(int arr[],int length, int pos, int value);
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat[nCols][ nRows]);
bool found_duplicate(int arr[],int length);



int main()
{
int arr[SIZE];
int arr2d[nRows][nCols];
print_matrix(arr2d,nRows);

//Call to different functions
}

void print_array(int array[], int length){
   for(int i=0;i<length; i++)
      printf("array[%d]= %d\n", i, array[i]);
}

void print_matrix(int mat[][nCols], int rows){
   for(int i=0;i<rows; i++){
    for(int j=0;j<nCols; j++)
         printf("mat[%d][%d]= %d\n", i,j, mat[i][j]);
    puts("");     
   }     
}

/*FUNCTION DEFINITIONS*/


bool isValid(const int arr[],int length, int pos){
   if (pos<lenght && pos>=0)
    printf("True");
   else
    printf("False");
}

/* Remove element */

void remove_element(int arr[],int length, int pos){
   if (pos>=lenght || pos<0){
   printf("Invalid index please try again\n");
   }
   /* creating variable i*/
   int i
   
    for (i = pos; i < (length - 1); i++) {
        arr[i] = arr[i + 1];
    }
    /* displaying the new updated array */
  printf("The new array is: ");
    for (i = 0; i < length - 1; i++) {
        printf("%d ", arr[i]);
    }
    

}

/* Insert element */

void insert_element(int arr[],int length, int pos, int value){
    if (pos < 0 || pos > length || length >= SIZE) {
        printf("Insertion of element failed due to wrong position or full array.\n");
        return;
    }
    
    for (int i = length; i > pos; i--) { /* shifting elements to the right */
        arr[i] = arr[i - 1];
    }

    arr[pos] = value; /* inserting new element */

    /* increment lenght */
    (length)++;

}

/* Reshape */

void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]){
    if (lenght!=nRows*nCols){
    printf("Error. Wrong input");
    }
     
    /* Copying 1d into 2d */
    int index = 0;  
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[index++];
        }
    }

    /* Displaying array */
    printf("New 2-D array:\n");
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }
}

/* matrix */

void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat[nCols][ nRows]){
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat[j][i] = mat[i][j];  /* Swap rows and columns */
        }
    }
}


/*Checking for duplicates*/

bool found_duplicate(int arr[],int length){
 for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true; /*Duplicates exist*/
            }
        }
    }
    return false;  
}
